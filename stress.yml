config:
  target: 'https://scc2122-app-canadacentral-rjr.azurewebsites.net/rest'
#  target: 'http://localhost:8080/scc2122-backend/rest'
  http:
    timeout: 10
  plugins:
    metrics-by-endpoint: {}
  processor: "./test-utils.js"
  variables:
     metricsProcessEndpoint : "myProcessEndpoint"  # function used to aggregate endpoints for statistics
  phases:
  - name: "Warm up"
    arrivalRate: 1
    duration: 10
  - name: "Test"
    arrivalRate: 1
    duration: 60

scenarios:
  - name: 'Passive reader'
    weight: 10
    flow:
      - function: "selectUserSkewed"
      - post:                          # First: login as a user
          url: "/auth"
          headers:
            Content-Type: application/json
          json:
            user: "{{ user }}"
            pwd: "{{ pwd }}"
      - loop:
        - get:                          # Get user channels
            url: "/user/{{ user }}/channels"
            headers:
              Accept: application/json
            capture:
              json: "$"
              as: "channelLst"
        - function: "selectChannelFromChannelLstSkewed"   # Select channel to read messages
        - get:
            url: "/channel/{{ channelId }}/messages?st=0&len=1000000"
            headers:
              Accept: application/json
            capture:
              json: "$"
              as: "msgList"
            ifTrue: "channelId"
        - function: "selectImagesIdFromMsgList"   # Select imageIds from MsgList
        - loop:                                   # load images
            - get:
                url: "/media/{{ $loopElement }}"
                headers:
                  Accept: application/octet-stream
          over: "imageIdLst"
        whileTrue: "random50"




  - name: 'Troll'
    weight: 5
    flow:
      - function: "selectUserSkewed"
      - post:                          # First: login as a user
          url: "/auth"
          headers:
            Content-Type: application/json
          json:
            user: "{{ user }}"
            pwd: "{{ pwd }}"
      - loop:
        - get:                          # Get user channels
            url: "/user/{{ user }}/channels"
            headers:
              Accept: application/json
            capture:
              json: "$"
              as: "channelLst"
        - function: "selectChannelFromChannelLstSkewed"   # Select channel to read messages
        - get:
            url: "/channel/{{ channelId }}/messages?st=0&len=2"
            headers:
              Accept: application/json
            capture:
              json: "$"
              as: "msgList"
            ifTrue: "channelId"
        - loop:                                 # Post a reply to the most recent messages
          - function: "genNewMessage"           # Generate message information
          - post:                          # Post image if ....
              url: "/media"
              headers:
                Content-Type: application/octet-stream
                Accept: application/json
              beforeRequest: "uploadImageBody"
              capture:
                regexp: "(.+)"
                as: "imageId"              # capture the reply as image id to be used in user creation
              ifTrue: "hasImage"   # post has image and there is a channel
          - post:                          # Post message
              url: "/message"
              headers:
                Content-Type: application/json
                Accept: application/json
              json:                         # NOTE: it is not necessary to send all fields
                id: "1"
                channel: "{{ $loopElement.channel }}"
                replied: "{{ $loopElement.id }}"
                user: "{{ user }}"
                text: "{{ msgText }}"
                idPhoto: "{{ imageId }}"
          over: "msgList"
        whileTrue: "random50"


  - name: 'Advertiser'
    weight: 2
    flow:
      - post:
          url: "/user"
          headers:
            Content-Type: application/json
            Accept: application/json
          json:
            id:  "1"
            name: "user1"
            pwd: "user1"
            photoId: ""
            channelIds: []
          capture:                     # Capturing channel id
            json: $.id
            as: "userId"
      - post:                          # First: login as a user
          url: "/auth"
          headers:
            Content-Type: application/json
          json:
            user: "{{ userId }}"
            pwd: "user1"
      - post:                          # Create channel
          url: "/channel"
          headers:
            Content-Type: application/json
            Accept: application/json
          json:
            id: "1"
            name: "test"
            owner: "{{ userId }}"
            publicChannel: false
            members: []
          capture:                     # Capturing channel id
            json: $.id
            as: "channelId"
      - loop:
        - function: "selectUserSkewed"
        - post:                          # Invite users
            url: "/user/invite/{{ userId }}/{{ channelId }}/{{ user }}"
        - function: "genNewMessage"           # Generate message information
        - post:                          # Post image if ....
            url: "/media"
            headers:
              Content-Type: application/octet-stream
              Accept: application/json
            beforeRequest: "uploadImageBody"
            capture:
              regexp: "(.+)"
              as: "imageId"              # capture the reply as image id to be used in user creation
        - post:                          # Post message
            url: "/message"
            headers:
              Content-Type: application/json
              Accept: application/json
            json:                         # NOTE: it is not necessary to send all fields
              id: "1"
              channel: "{{ channelId }}"
              user: "{{ userId }}"
              text: "welcome {{ user }}"
              idPhoto: "{{ imageId }}"
              replied: ""
        count: 50
      - delete:
          url: "/channel/{{ channelId }}"
      - delete:
          url: "/user/{{ userId }}"
